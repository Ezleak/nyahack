package me.jiyun233.nya.module.modules.exploits

import me.jiyun233.nya.event.events.client.PacketEvent
import me.jiyun233.nya.module.Category
import me.jiyun233.nya.module.Module
import me.jiyun233.nya.module.ModuleInfo
import net.minecraft.item.ItemBow
import net.minecraft.network.play.client.CPacketEntityAction
import net.minecraft.network.play.client.CPacketPlayer.PositionRotation
import net.minecraft.network.play.client.CPacketPlayerDigging
import net.minecraft.network.play.client.CPacketPlayerTryUseItem
import net.minecraft.util.EnumHand
import net.minecraft.util.math.BlockPos
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent


@ModuleInfo(name = "BowSpoof", descriptions = "Shoot high damage bow", category = Category.EXPLOITS)
object BowSpoof : Module() {
    private var bow = registerSetting("AutoRelease", false)
    private var spoofs = registerSetting("Spoofs", 10, 1, 300)

    override fun onUpdate() {
        if (fullNullCheck()) return
        if (bow.value && mc.player.heldItemMainhand.getItem() is ItemBow && mc.player.isHandActive && mc.player.itemInUseMaxCount >= 3) {
            mc.player.connection.sendPacket(
                CPacketPlayerDigging(
                    CPacketPlayerDigging.Action.RELEASE_USE_ITEM,
                    BlockPos.ORIGIN,
                    mc.player.horizontalFacing
                )
            )
            mc.player.connection.sendPacket(CPacketPlayerTryUseItem(mc.player.activeHand))
            mc.player.stopActiveHand()
        }
        if (bow.value && mc.player.heldItemOffhand.getItem() is ItemBow && mc.player.isHandActive && mc.player.itemInUseMaxCount >= 3) {
            mc.player.connection.sendPacket(
                CPacketPlayerDigging(
                    CPacketPlayerDigging.Action.RELEASE_USE_ITEM,
                    BlockPos.ORIGIN,
                    mc.player.horizontalFacing
                )
            )
            mc.player.connection.sendPacket(CPacketPlayerTryUseItem(mc.player.activeHand))
            mc.player.stopActiveHand()
        }
    }

    @SubscribeEvent
    fun onPacketSend(event: PacketEvent.Send) {
        if (event.packet is CPacketPlayerDigging) {
            val packet: CPacketPlayerDigging = event.getPacket()
            if (packet.action == CPacketPlayerDigging.Action.RELEASE_USE_ITEM) {
                val handStack = mc.player.getHeldItem(EnumHand.MAIN_HAND)
                if (!handStack.isEmpty() && handStack.getItem() is ItemBow) {
                    mc.player.connection.sendPacket(
                        CPacketEntityAction(
                            mc.player,
                            CPacketEntityAction.Action.START_SPRINTING
                        )
                    )
                    for (index in 0 until spoofs.value) {
                        mc.player.connection.sendPacket(
                            PositionRotation(
                                mc.player.posX,
                                mc.player.posY + 1e-10,
                                mc.player.posZ,
                                mc.player.rotationYaw,
                                mc.player.rotationPitch,
                                false
                            )
                        )
                        mc.player.connection.sendPacket(
                            PositionRotation(
                                mc.player.posX,
                                mc.player.posY - 1e-10,
                                mc.player.posZ,
                                mc.player.rotationYaw,
                                mc.player.rotationPitch,
                                true
                            )
                        )
                    }
                }
            }
        }
    }
}